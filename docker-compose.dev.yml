version: "3.7"
networks:
  cabbage-backend:
    driver: bridge
    name: cabbage-backend
  cabbage-frontend:
    driver: bridge
    name: cabbage-frontend
services:
  database:
    image: postgres:12.1-alpine
    restart: unless-stopped
    env_file: database.example.env
    expose:
      - "5432"
    volumes:
      - cabbage-dev-db:/var/lib/postgresql/data
    networks:
      - cabbage-backend
  # The backend Python server
  api:
    build:
      dockerfile: Dockerfile
      context: ./api
    restart: unless-stopped
    env_file: ./api/api.example.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Path(`/api`) || PathPrefix(`/api/`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.middlewares.api-compress.compress=true"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    links:
      - database
    depends_on:
      - database
    networks:
      - cabbage-backend
  client:
    build:
      dockerfile: Dockerfile
      context: ./client
    restart: unless-stopped
    env_file: ./client/client.example.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Path(`/`) || PathPrefix(`/`)"
      - "traefik.http.routers.client.entrypoints=web"
      - "traefik.http.middlewares.client-compress.compress=true"
      - "traefik.http.services.client.loadbalancer.server.port=3000"
    depends_on:
      - api
    networks:
      - cabbage-frontend
    volumes:
      - "./client:/usr/src/app"
    entrypoint:
      - yarn
      - dev
  traefik:
    image: traefik:v2.1.1
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command:
      [
        "--api.insecure=true",
        "--api.dashboard=true",
        "--providers.docker=true",
        "--providers.docker.exposedbydefault=false",
        "--entrypoints.web.address=:80",
      ]
    networks:
      - cabbage-frontend
      - cabbage-backend
  # Autoupdate images
  # watchtower:
  #   image: v2tec/watchtower
  #   restart: unless-stopped
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
volumes:
  cabbage-dev-db:
